export interface PromptAnswer {
    name: string;
    value: string;
}
export type FilterFunction = (answers: PromptAnswer[], input: string) => Promise<PromptAnswer[]>;
interface BaseQuestion<TName extends string> {
    name: TName;
    message: string;
    preface?: string;
    validate?: (value: string) => string | true;
    default?: string;
    result?: (value: string) => string | boolean;
    choices?: QuestionChoiceType[];
    source?: (filter: FilterFunction) => FilterFunction;
}
type TextQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'input';
    default: string;
};
type PasswordQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'password';
};
type SelectableQuestion<TName extends string> = BaseQuestion<TName> & {
    type: 'select' | 'autocomplete';
    choices: QuestionChoiceType[];
};
export type Question<TName extends string = string> = TextQuestion<TName> | SelectableQuestion<TName> | PasswordQuestion<TName>;
export interface QuestionChoiceType {
    name: string;
    value: string;
    group?: {
        name: string;
        order: number;
    };
}
export declare const prompt: <TName extends string & keyof TAnswers, TAnswers extends { [key in TName]: string; } = { [key_1 in TName]: string; }>(questions: readonly Question<TName>[]) => Promise<TAnswers>;
export declare function nonEmptyDirectoryPrompt(directory: string): Promise<void>;
export declare function terminateBlockingPortProcessPrompt(port: number, stepDescription?: string): Promise<boolean>;
export declare const keypress: () => Promise<unknown>;
export {};
